// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

syntax = "proto3";

package snark;

service GraphEngine {
  // Extract node/edge features
  rpc GetNodeFeatures (NodeFeaturesRequest) returns (NodeFeaturesReply) {}
  rpc GetEdgeFeatures (EdgeFeaturesRequest) returns (EdgeFeaturesReply) {}
  rpc GetNodeSparseFeatures (NodeSparseFeaturesRequest) returns (SparseFeaturesReply) {}
  rpc GetEdgeSparseFeatures (EdgeSparseFeaturesRequest) returns (SparseFeaturesReply) {}
  rpc GetNodeStringFeatures (NodeSparseFeaturesRequest) returns (StringFeaturesReply) {}
  rpc GetEdgeStringFeatures (EdgeSparseFeaturesRequest) returns (StringFeaturesReply) {}

  rpc GetNeighbors (GetNeighborsRequest) returns (GetNeighborsReply) {}

  // Sample node neighbors
  rpc WeightedSampleNeighbors (WeightedSampleNeighborsRequest) returns (WeightedSampleNeighborsReply) {}
  rpc UniformSampleNeighbors (UniformSampleNeighborsRequest) returns (UniformSampleNeighborsReply) {}

  // Global information about graph
  rpc GetMetadata (EmptyMessage) returns (MetadataReply) {}
  rpc GetNodeTypes (NodeTypesRequest) returns (NodeTypesReply) {}
}

service GraphSampler {
  rpc Create (CreateSamplerRequest) returns (CreateSamplerReply) {}

  rpc Sample (SampleRequest) returns (SampleReply) {}
}

message CreateSamplerRequest {
  repeated int32 enitity_types = 1; // node or edge types.
  bool is_edge = 2;
  enum Category {
    WEIGHTED = 0;
    UNIFORM_WITH_REPLACEMENT = 1;
    UNIFORM_WITHOUT_REPLACEMENT = 2;
  }
  Category category = 3;
}

message EmptyMessage {
}

message MetadataReply {
  uint64 nodes = 1;
  uint64 edges = 2;
  uint64 node_types = 3;
  uint64 edge_types = 4;
  uint64 node_features = 5;
  uint64 edge_features = 6;
  uint64 partitions = 7;
  repeated float node_partition_weights = 8;
  repeated float edge_partition_weights = 9;
  repeated uint64 node_count_per_type = 10;
  repeated uint64 edge_count_per_type = 11;
}

message CreateSamplerReply {
  uint64 sampler_id = 1;
  float weight = 2;
}

message SampleRequest {
  uint64 sampler_id = 1;
  int64 seed = 2;
  int32 count = 3;
  bool is_edge = 4;
}

message SampleReply {
  repeated int32 types = 1;

  // For edge sampler first half is source nodes,
  // second half is destination nodes.
  repeated int64 node_ids = 2;
}


message NodeTypesRequest {
  repeated int64 node_ids = 1;
}

message NodeTypesReply {
  repeated int32 types = 1;
  // From the request nodes.
  repeated uint32 offsets = 2;
}

message FeatureInfo {
  int32 id = 1;
  // Size is in bytes
  uint32 size = 2;
}

message NodeFeaturesRequest {
  repeated int64 node_ids = 1;
  repeated FeatureInfo features = 2;
}


message NodeFeaturesReply {
  // Keep bytes to simplify addition of new features later.
  bytes feature_values = 1;
  // From the request nodes.
  repeated uint32 offsets = 2;
}

message EdgeFeaturesRequest {
  // Source ids - first half, destination ids - second half
  repeated int64 node_ids = 1;
  repeated int32 types = 2;
  repeated FeatureInfo features = 3;
}

message EdgeFeaturesReply {
  // Keep bytes to simplify addition of new features later.
  bytes feature_values = 1;
  // Index of the edge in the request for the feature value.
  repeated uint32 offsets = 2;
}

message NodeSparseFeaturesRequest {
  repeated int64 node_ids = 1;
  repeated int32 feature_ids = 2;
}

message EdgeSparseFeaturesRequest {
  // Source ids - first half, destination ids - second half
  repeated int64 node_ids = 1;
  repeated int32 types = 2;
  repeated int32 feature_ids = 3;
}

message SparseFeaturesReply {
  bytes values = 1;
  repeated int64 indices = 2;
  repeated int64 dimensions = 3;
  repeated int64 indices_counts = 4;
  repeated int64 values_counts = 5;
}

message StringFeaturesReply {
  bytes values = 1;
  repeated int64 dimensions = 2;
}

message GetNeighborsRequest {
  repeated int64 node_ids = 1;
  repeated int32 edge_types = 2;
}

message GetNeighborsReply {
  repeated int64 node_ids = 1;
  repeated float edge_weights = 2;
  repeated int32 edge_types = 3;
  repeated uint64 neighbor_counts = 4;
}

message WeightedSampleNeighborsRequest {
  int64 seed = 1;
  repeated int64 node_ids = 2;
  repeated int32 edge_types = 3;
  int64 default_node_id = 4;
  float default_node_weight = 5;
  int32 default_edge_type = 6;
  int32 count = 7;
}

message WeightedSampleNeighborsReply {
  repeated int64 neighbor_ids = 1;
  repeated float neighbor_weights = 2;
  repeated int32 neighbor_types = 3;
  repeated int64 node_ids = 4;
  repeated float shard_weights = 5;
}


message UniformSampleNeighborsRequest {
  int64 seed = 1;
  repeated int64 node_ids = 2;
  repeated int32 edge_types = 3;
  int64 default_node_id = 4;
  int32 default_edge_type = 5;
  int32 count = 6;
  bool without_replacement = 7;
}

message UniformSampleNeighborsReply {
  repeated int64 neighbor_ids = 1;
  repeated int32 neighbor_types = 2;
  repeated uint64 shard_counts = 3;
  repeated int64 node_ids = 4;
}
